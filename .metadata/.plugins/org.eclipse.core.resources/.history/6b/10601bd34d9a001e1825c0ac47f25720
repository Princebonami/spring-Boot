package com.thinkconstructive.restdemo.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.ResultActions;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.thinkconstructive.restdemo.model.CloudVendor;
import com.thinkconstructive.restdemo.service.CloudService;

import netscape.javascript.JSObject;

@WebMvcTest(value = CloudController.class)
public class CloudControllerTest {
	
	@MockBean          // it is used to create mock bean  mocking means creating dummy object
	private CloudService cloudService;
	
	@Autowired
	private MockMvc mockMvc;  // it is used to send the request
	
	// 1. correct
	// 2. incorrect 
	// 3. exception
	
	@Test
	public void testGetCloudVendorDetails() throws Exception
	{
//		CloudVendor cloudVendor=new CloudVendor(1,"Manoj","Barauni",6299925351l);
		List<CloudVendor> list=new ArrayList<CloudVendor>();
		when(cloudService.getCloudVendorDetails()).thenReturn(list);
		Integer result= mockMvc.perform(MockMvcRequestBuilders.get("/cloudvendors")).andExpect(status().isOk()).andReturn().getResponse().getStatus();
		
		assertEquals(200, result);
//		MockHttpServletRequestBuilder requestBuilder =MockMvcRequestBuilders.get("/cloudvendors");  // here request gets created
		
//		ResultActions resultActions= mockMvc.perform(requestBuilder);
//		MvcResult mvcResult=  resultActions.andReturn();
//		MockHttpServletResponse response=mvcResult.getResponse();
//		assertEquals(4096, response.getBufferSize());
//		assertEquals(200, response.getStatus());	
		
//		mockMvc.perform(MockMvcRequestBuilders.get("/cloudvendors"))
//        .andExpect(
//            result -> {
//                MockHttpServletResponse response = result.getResponse();
//               // assertEquals(4096, response.getBufferSize());
//                assertEquals(200, response.getStatus());
//                // Add more assertions if needed
//            }
//        );

	}
	
	@Test
	public void testGetCloudVendorById() throws Exception
	{
		Integer vendorId=1;
		
		CloudVendor cloudVendor=new CloudVendor(vendorId,"Manoj","Barauni",6299925351l); 
	   	  when(cloudService.getCloudVendorById(vendorId)).thenReturn(cloudVendor);
	   	 MvcResult mvcResult= mockMvc.perform(MockMvcRequestBuilders.get("/cloudvendors/{vendorId}",vendorId)).andExpect(status().isOk()).andReturn();
	   	 String response=mvcResult.getResponse().getContentAsString();
	   	 
	   	 ObjectMapper objectMapper=new ObjectMapper();
	   	 CloudVendor actuVendor=objectMapper.readValue(response,CloudVendor.class);
	   	 
	   	 assertEquals(cloudVendor.getVendorId(),actuVendor.getVendorId());
	   	assertEquals(cloudVendor.getVendorName(),actuVendor.getVendorName());
	   	assertEquals(cloudVendor.getVendorAddress(),actuVendor.getVendorAddress());
	   	assertEquals(cloudVendor.getVendorPhoneNmber(),actuVendor.getVendorPhoneNmber());
		
	}
	
	

}
